/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2011 SIGNET LAB. Department of Information Engineering (DEI), University of Padua
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Extension done by:
 *      Aziza Ben-Mosbah <aziza.ben.mosbah@gmail.com*
 */ 

#ifndef LTE_LOAD_PROFILE_MANAGEMENT_H
#define LTE_LOAD_PROFILE_MANAGEMENT_H


#include <list>
#include <vector>
#include <map>
#include <utility>
#include <ns3/ptr.h>
#include <stdint.h>
#include <ns3/spectrum-value.h>
#include <ns3/net-device.h>
#include <ns3/lte-helper.h>

namespace ns3 {

  // global table of constant load profile
  static const double ConstantLoadProfiles [5][24] = {
  //profile 1
  { 0.2324159021,	0.0764525994,	0.0214067278,	0,	0,	0.006116208,	0.0366972477,	0.1039755352,	0.250764526,	0.4801223242,	0.7431192661,	0.9327217125,	0.9877675841,	0.9357798165,	0.8623853211,	0.8134556575,	0.7798165138,	0.755351682,	0.7645259939,	0.8532110092,	0.9633027523,	1,	0.871559633,	0.5779816514 },
  //profile 2
  { 0.1021021021,	0.036036036,	0.006006006,	0,	0,	0.015015015,	0.0810810811,	0.2192192192,	0.4324324324,	0.6786786787,	0.8888888889,	0.984984985,	0.981981982,	0.9369369369,	0.9069069069,	0.8978978979,	0.8618618619,	0.8018018018,	0.7897897898,	0.8828828829,	1,	0.963963964,	0.6996996997,	0.3063063063 },
  //profile 3
  { 0.1459227468,	0.0364806867,	0.0021459227,	0,	0,	0.0021459227,	0.0278969957,	0.1115879828,	0.2660944206,	0.482832618,	0.7103004292,	0.8798283262,	0.9484978541,	0.9334763948,	0.8948497854,	0.8755364807,	0.8755364807,	0.8841201717,	0.9077253219,	0.9549356223,	1,	0.9635193133,	0.7896995708,	0.4935622318 },
  //profile 4
  { 0.0916271722,	0.0268562401,	0.0063191153,	0,	0,	0.0015797788,	0.0157977883,	0.0568720379,	0.1579778831,	0.3522906793,	0.6192733017,	0.8672985782,	1,	0.9936808847,	0.9257503949,	0.8830963665,	0.9036334913,	0.9352290679,	0.9257503949,	0.8578199052,	0.766192733,	0.6698262243,	0.5402843602,	0.3254344392 },
  //profile 5
  { 0.1896024465,	0.0428134557,	0,	0,	0,	0.003058104,	0.0458715596,	0.1590214067,	0.3363914373,	0.5504587156,	0.7675840979,	0.9266055046,	1,	0.9785932722,	0.9296636086,	0.8899082569,	0.880733945,	0.8654434251,	0.8654434251,	0.8990825688,	0.9602446483,	0.9663608563,	0.8409785933,	0.5902140673	},
	};

  // global table of morning peak profile
  static const double MorningLoadProfiles [5][24] = {
  //profile 1
  { 0.0227642276,	0.0016260163,	0,	0,	0.006504065,	0.0243902439,	0.0894308943,	0.243902439,	0.4861788618,	0.7544715447,	0.9495934959,	1,	0.9170731707,	0.8016260163,	0.7170731707,	0.6699186992,	0.6276422764,	0.556097561,	0.4764227642,	0.4178861789,	0.3723577236,	0.3105691057,	0.2146341463,	0.0975609756 },
  //profile 2
  { 0.0516129032,	0.0258064516,	0.0064516129,	0,	0,	0.0096774194,	0.0483870968,	0.164516129,	0.3774193548,	0.6580645161,	0.8967741935,	1,	0.9612903226,	0.8612903226,	0.7903225806,	0.7741935484,	0.7516129032,	0.7096774194,	0.635483871,	0.5451612903,	0.4516129032,	0.3516129032,	0.2483870968,	0.1451612903	},
  //profile 3
  { 0.0889679715,	0.0320284698,	0.0035587189,	0,	0,	0.0106761566,	0.0747330961,	0.2135231317,	0.4270462633,	0.6832740214,	0.9003558719,	1,	0.9608540925,	0.8291814947,	0.7224199288,	0.6690391459,	0.6476868327,	0.6192170819,	0.5978647687,	0.6049822064,	0.6192170819,	0.5622775801,	0.4199288256,	0.231316726	},
  //profile 4
  { 0.0434782609,	0.0139130435,	0,	0,	0,	0.0069565217,	0.0382608696,	0.1339130435,	0.3304347826,	0.6086956522,	0.8695652174,	1,	0.9686956522,	0.8747826087,	0.8191304348,	0.8139130435,	0.7913043478,	0.6973913043,	0.5634782609,	0.4591304348,	0.412173913,	0.372173913,	0.2886956522,	0.1617391304	},
  //profile 5
  { 0.0271966527,	0.0062761506,	0,	0,	0,	0.010460251,	0.0711297071,	0.2071129707,	0.4330543933,	0.6966527197,	0.910041841,	1,	0.9728033473,	0.8974895397,	0.8410041841,	0.8138075314,	0.7594142259,	0.6464435146,	0.489539749,	0.3577405858,	0.2719665272,	0.2259414226,	0.1820083682,	0.1171548117	},
  };
	
  // global table of evening peak profile
  static const double EveningLoadProfiles [5][24] = {
  //profile 1
  { 0.1485507246,	0.0344202899,	0.0018115942,	0,	0,	0,	0.0235507246,	0.0851449275,	0.1902173913,	0.3152173913,	0.4384057971,	0.509057971,	0.5289855072,	0.518115942,	0.5217391304,	0.5416666667,	0.5543478261,	0.5597826087,	0.6086956522,	0.740942029,	0.9130434783,	1,	0.8876811594,	0.5851449275 },
  //profile 2
  { 0.1134020619,	0.0268041237,	0.012371134,	0.018556701,	0.006185567,	0,	0.0206185567,	0.0886597938,	0.193814433,	0.3154639175,	0.424742268,	0.4927835052,	0.5154639175,	0.5072164948,	0.5216494845,	0.5484536082,	0.5690721649,	0.5608247423,	0.5917525773,	0.7092783505,	0.8948453608,	1,	0.8969072165,	0.5608247423 },
  //profile 3
  { 0.2133333333,	0.0666666667,	0.008,	0,	0,	0.008,	0.04,	0.1066666667,	0.2,	0.296,	0.4,	0.464,	0.4933333333,	0.496,	0.4986666667,	0.52,	0.5386666667,	0.56,	0.616,	0.7333333333,	0.8933333333, 1,	0.952,	0.6986666667	},
  //profile 4
  { 0.1272727273,	0.025,	0,	0,	0,	0.0022727273,	0.0272727273,	0.0818181818,	0.15,	0.225,	0.3068181818,	0.3727272727,	0.4022727273,	0.4,	0.3954545455,	0.3954545455,	0.3954545455,	0.4136363636,	0.4863636364,	0.6568181818,	0.875,	1,	0.9068181818,	0.5909090909	},
  //profile 5
  { 0.3017621145,	0.1255506608,	0.0484581498,	0.0220264317,	0.0110132159,	0,	0.0176211454,	0.0528634361,	0.1167400881,	0.2136563877,	0.3303964758,	0.436123348,	0.5,	0.5264317181,	0.5286343612,	0.5286343612,	0.5110132159,	0.4933920705,	0.5264317181,	0.6563876652,	0.8568281938,	1,	0.9559471366,	0.7092511013	},
  };
  
/**
 * This class provides the load management for eNBs
 */
class LteLoadProfileManagement : public Object
{

public:

  LteLoadProfileManagement (void);
  virtual ~LteLoadProfileManagement (void);
  static TypeId GetTypeId (void);
  virtual void DoDispose (void);

  void SetLteHelper (Ptr<LteHelper> h);
  void SetDevices (NetDeviceContainer enbDevs, NetDeviceContainer ueDevs, std::vector<uint32_t> maxUesPerEnb, std::vector<uint32_t> lp);  
  void AttachUesToSelectedEnb (Ptr<LteHelper> lh, NetDeviceContainer ues, Ptr<NetDevice> enb);
  //void SetUeTxPower (uint32_t ue, double pow);
  void Disconnect (Ptr <NetDevice> ueDevice, Ptr <NetDevice> enbDevice);
  void CreateEnbAttachment (Ptr<NetDevice> enbDev);
  void CreateEnbAttachment ();

  struct EnbInfo
  {
    uint32_t id;
    uint32_t maxUes;
    uint32_t loadProfileType;
    uint32_t loadProfileNumber;
  };

private:
  Ptr<LteHelper> m_lteHelper;  
  NetDeviceContainer m_ueDevs;
  NetDeviceContainer m_enbDevs;
  std::map<Ptr<NetDevice>, LteLoadProfileManagement::EnbInfo> m_enbMaxUesLoadProfileMap;
  uint32_t m_enbs;
  uint32_t m_ues;

};

} // namespace ns3

#endif /* LTE_LOAD_PROFILE_MANAGEMENT_H */
